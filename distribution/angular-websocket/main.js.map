{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/services/messaging.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h1>Demo for Messaging Service</h1>\\n\\n<p>Status : {{state}}</p>\\n\\n<button (click)=\\\"sendAction()\\\">SEND</button>\\n\\n<h3>History</h3>\\n<ul>\\n  <li *ngFor=\\\"let message of messageHistory\\\">{{message}}</li>\\n</ul>\"","import { Component } from \"@angular/core\";\nimport { MessagingService } from \"./services/messaging.service\";\nimport { Message } from \"@stomp/stompjs\";\nimport { StompState } from \"@stomp/ng2-stompjs\";\n\nconst WEBSOCKET_URL = \"ws://localhost:8080/socket\";\nconst EXAMPLE_URL = \"/topic/server-broadcaster\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  private messagingService: MessagingService;\n\n  messageHistory = [];\n  state: string = \"NOT CONNECTED\";\n\n  constructor() {\n    // Instantiate a messagingService\n    this.messagingService = new MessagingService(WEBSOCKET_URL, EXAMPLE_URL);\n\n    // Subscribe to its stream (to listen on messages)\n    this.messagingService.stream().subscribe((message: Message) => {\n      this.messageHistory.unshift(message.body);\n      console.log(message);\n    });\n\n    // Subscribe to its state (to know its connected or not)\n    this.messagingService.state().subscribe((state: StompState) => {\n      this.state = StompState[state];\n    });\n  }\n\n  // Use this methods to send message back to server\n  sendAction() {\n    console.log(\"Sending message\");\n    this.messagingService.send(\"/server-receiver\", {\n      text: \"This is cool\",\n      text2: \"I'm so happy!\"\n    });\n  }\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\nimport { AppComponent } from \"./app.component\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { StompService, StompConfig, StompState } from \"@stomp/ng2-stompjs\";\nimport { Message } from \"@stomp/stompjs\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\n\nexport class MessagingService {\n  private messages: Observable<Message>;\n  private stompService: StompService;\n\n  constructor(socketUrl: string, streamUrl: string) {\n    // Create Stomp Configuration\n    let stompConfig: StompConfig = {\n      url: socketUrl,\n      headers: {\n        login: \"\",\n        passcode: \"\"\n      },\n      heartbeat_in: 0,\n      heartbeat_out: 20000,\n      reconnect_delay: 5000,\n      debug: true\n    };\n\n    // Create Stomp Service\n    this.stompService = new StompService(stompConfig);\n\n    // Connect to a Stream\n    this.messages = this.stompService.subscribe(streamUrl);\n  }\n\n  public stream(): Observable<Message> {\n    return this.messages;\n  }\n\n  public send(url: string, message: any) {\n    return this.stompService.publish(url, JSON.stringify(message));\n  }\n\n  public state(): BehaviorSubject<StompState> {\n    return this.stompService.state;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}